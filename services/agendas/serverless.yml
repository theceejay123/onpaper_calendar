# NOTE: update this with your service name
service: calendar-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or falls back to what we have set in the provider section
  stage: ${opt:stage, self:provider.stage}
  # Name of the SST app that's deploying our infrastructure
  sstApp: ${self:custom.stage}-agendas-infra

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: ca-central-1
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  environment:
    tableName: !ImportValue "${self:custom.sstApp}-TableName"

    #  SAMPLE_ENV_VAR: ${env:SAMPLE_ENV_VAR}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource:
        - !ImportValue "${self:custom.sstApp}-TableArn"
        - Fn::ImportValue: !Sub "${self:custom.sstApp}-TableArn/index/*"

functions:
  create:
    handler: create.main
    events:
      - http:
          path: agendas
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
          authorizer: aws_iam
  get:
    handler: get.main
    events:
      - http:
          path: agendas/by_id/{id}
          method: get
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
          authorizer: aws_iam
  list:
    handler: list.main
    events:
      - http:
          path: agendas/by_date/{date}
          method: get
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
          authorizer: aws_iam
  fetch:
    handler: fetch.main
    events:
      - http:
          path: agendas
          method: get
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
          authorizer: aws_iam
  delete:
    handler: delete.main
    events:
      - http:
          path: agendas/{id}
          method: delete
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
          authorizer: aws_iam
  update:
    handler: update.main
    events:
      - http:
          path: agendas/{id}
          method: put
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
          authorizer: aws_iam
  # hello:
  #   handler: handlers/handler.hello
  #   events:
  #     - http:
  #         path: hello
  #         method: get

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # Cognito Identity Pool Policy
  - ${file(resources/cognito-policy.yml)}
